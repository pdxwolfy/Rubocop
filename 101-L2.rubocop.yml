# Common configuration.
AllCops:
  # Display cop names
  DisplayCopNames: true
  # Display Extra details
  ExtraDetails: true
  # All cops disabled by default
  DisabledByDefault: true
  # What version of the Ruby interpreter is the inspected code intended to
  # run on? (If there is more than one, set this to the lowest version.)
  #TargetRubyVersion: 2.3

Style/AccessModifierIndentation:
  Description: Check indentation of private/protected visibility modifiers.
  EnforcedStyle: indent
  SupportedStyles:
    - outdent
    - indent
  Enabled: true

Style/AccessorMethodName:
  Description: Check the naming of accessor methods for get_/set_.
  Enabled: true

Style/Alias:
  Description: 'Use alias_method instead of alias.'
  Enabled: true

Style/AlignArray:
  Description: >-
                 Align the elements of an array literal if they span more than
                 one line.
  Enabled: true

Style/AlignParameters:
  Description: >-
                 Align the parameters of a method call if they span more
                 than one line.
  Enabled: true
  # Alignment of parameters in multi-line method calls.
  #
  # The `with_first_parameter` style aligns the following lines along the same
  # column as the first parameter.
  #
  #     method_call(a,
  #                 b)
  #
  # The `with_fixed_indentation` style aligns the following lines with one
  # level of indentation relative to the start of the line with the method call.
  #
  #     method_call(a,
  #       b)
  EnforcedStyle: with_first_parameter
  SupportedStyles:
    - with_first_parameter
    - with_fixed_indentation

Style/AndOr:
  Description: 'Use &&/|| instead of and/or.'
  Enabled: true
  # Whether `and` and `or` are banned only in conditionals (conditionals)
  # or completely (always).
  EnforcedStyle: conditionals
  SupportedStyles:
    - always
    - conditionals

Style/ArrayJoin:
  Description: 'Use Array#join instead of Array#*.'
  Enabled: true

Style/AsciiComments:
  Description: 'Use only ascii symbols in comments.'
  Enabled: true

Style/AsciiIdentifiers:
  Description: 'Use only ascii symbols in identifiers.'
  Enabled: true

Style/Attr:
  Description: 'Checks for uses of Module#attr.'
  Enabled: true

Style/AutoResourceCleanup:
  Description: 'Suggests the usage of an auto resource cleanup version of a method (if available).'
  Enabled: true

Style/BarePercentLiterals:
  Description: 'Checks if usage of %() or %Q() matches configuration.'
  Enabled: true
  EnforcedStyle: bare_percent
  SupportedStyles:
    - percent_q
    - bare_percent

Style/BeginBlock:
  Description: 'Avoid the use of BEGIN blocks.'
  Enabled: true

Style/BlockDelimiters:
  Description: >-
                Avoid using {...} for multi-line blocks (multiline chaining is
                always ugly).
                Prefer {...} over do...end for single-line blocks.
  Enabled: true
  EnforcedStyle: line_count_based
  SupportedStyles:
    # The `line_count_based` style enforces braces around single line blocks and
    # do..end around multi-line blocks.
    - line_count_based
    # The `semantic` style enforces braces around functional blocks, where the
    # primary purpose of the block is to return a value and do..end for
    # procedural blocks, where the primary purpose of the block is its
    # side-effects.
    #
    # This looks at the usage of a block's method to determine its type (e.g. is
    # the result of a `map` assigned to a variable or passed to another
    # method) but exceptions are permitted in the `ProceduralMethods`,
    # `FunctionalMethods` and `IgnoredMethods` sections below.
    - semantic
    # The `braces_for_chaining` style enforces braces around single line blocks
    # and do..end around multi-line blocks, except for multi-line blocks whose
    # return value is being chained with another method (in which case braces
    # are enforced).
    - braces_for_chaining
  ProceduralMethods:
    # Methods that are known to be procedural in nature but look functional from
    # their usage, e.g.
    #
    #   time = Benchmark.realtime do
    #     foo.bar
    #   end
    #
    # Here, the return value of the block is discarded but the return value of
    # `Benchmark.realtime` is used.
    - benchmark
    - bm
    - bmbm
    - create
    - each_with_object
    - measure
    - new
    - realtime
    - tap
    - with_object
  FunctionalMethods:
    # Methods that are known to be functional in nature but look procedural from
    # their usage, e.g.
    #
    #   let(:foo) { Foo.new }
    #
    # Here, the return value of `Foo.new` is used to define a `foo` helper but
    # doesn't appear to be used from the return value of `let`.
    - let
    - let!
    - subject
    - watch
  IgnoredMethods:
    # Methods that can be either procedural or functional and cannot be
    # categorised from their usage alone, e.g.
    #
    #   foo = lambda do |x|
    #     puts "Hello, #{x}"
    #   end
    #
    #   foo = lambda do |x|
    #     x * 100
    #   end
    #
    # Here, it is impossible to tell from the return value of `lambda` whether
    # the inner block's return value is significant.
    - lambda
    - proc
    - it

Style/BlockEndNewline:
  Description: 'Put end statement of multiline block on its own line.'
  Enabled: true

Style/CaseEquality:
  Description: 'Avoid explicit use of the case equality operator(===).'
  Enabled: true

Style/CaseIndentation:
  Description: 'Indentation of when in a case/when/[else/]end.'
  Enabled: true
  IndentWhenRelativeTo: case
  SupportedStyles:
    - case
    - end
  IndentOneStep: false

Style/CharacterLiteral:
  Description: 'Checks for uses of character literals.'
  Enabled: true

Style/ClassAndModuleCamelCase:
  Description: 'Use CamelCase for classes and modules.'
  Enabled: true

Style/ClassAndModuleChildren:
  Description: 'Checks style of children classes and modules.'
  Enabled: true
  # Checks the style of children definitions at classes and modules.
  #
  # Basically there are two different styles:
  #
  # `nested` - have each child on a separate line
  #   class Foo
  #     class Bar
  #     end
  #   end
  #
  # `compact` - combine definitions as much as possible
  #   class Foo::Bar
  #   end
  #
  # The compact style is only forced, for classes / modules with one child.
  EnforcedStyle: compact
  SupportedStyles:
    - nested
    - compact

Style/ClassCheck:
  Description: 'Enforces consistent use of `Object#is_a?` or `Object#kind_of?`.'
  Enabled: true
  EnforcedStyle: is_a?
  SupportedStyles:
    - is_a?
    - kind_of?

Style/ClassMethods:
  Description: 'Use self when defining module/class methods.'
  Enabled: true

Style/ClassVars:
  Description: 'Avoid the use of class variables.'
  Enabled: true

Style/ClosingParenthesisIndentation:
  Description: 'Checks the indentation of hanging closing parentheses.'
  Enabled: true

Style/CollectionMethods:
  Description: 'Preferred collection methods.'
  Enabled: true
  # Mapping from undesired method to desired_method
  # e.g. to use `detect` over `find`:
  #
  # CollectionMethods:
  #   PreferredMethods:
  #     find: detect
  PreferredMethods:
    collect: 'map'
    collect!: 'map!'
    detect: 'find'
    find_all: 'select'
    inject: 'reduce'
    length: 'size'

Style/ColonMethodCall:
  Description: 'Do not use :: for method call.'
  Enabled: true

Style/CommandLiteral:
  Description: 'Use `` or %x around command literals.'
  Enabled: true
  # backticks: Always use backticks.
  # percent_x: Always use %x.
  # mixed: Use backticks on single-line commands, and %x on multi-line commands.
  EnforcedStyle: mixed
  SupportedStyles:
    - backticks
    - percent_x
    - mixed
  # If false, the cop will always recommend using %x if one or more backticks
  # are found in the command string.
  AllowInnerBackticks: false

Style/CommentIndentation:
  Description: 'Indentation of comments.'
  Enabled: true

Style/ConstantName:
  Description: 'Constants should use SCREAMING_SNAKE_CASE.'
  Enabled: true

Style/DotPosition:
  Description: 'Checks the position of the dot in multi-line method calls.'
  Enabled: true
  EnforcedStyle: leading
  SupportedStyles:
    - leading
    - trailing

Style/EachWithObject:
  Description: 'Prefer `each_with_object` over `inject` or `reduce`.'
  Enabled: true

Style/ElseAlignment:
  Description: 'Align elses and elsifs correctly.'
  Enabled: true

Style/EmptyElse:
  Description: 'Avoid empty else-clauses.'
  Enabled: true
  EnforcedStyle: both
  # Warn on empty else statements
  # empty - warn only on empty else
  # nil - warn on else with nil in it
  # both - warn on empty else and else with nil in it
  SupportedStyles:
    - empty
    - nil
    - both

Style/EmptyLineBetweenDefs:
  Enabled: true
  # If true, this parameter means that single line method definitions don't
  # need an empty line between them.
  AllowAdjacentOneLineDefs: true

Style/EmptyLines:
  Description: "Don't use several empty lines in a row."
  Enabled: true

Style/EmptyLinesAroundAccessModifier:
  Description: "Keep blank lines around access modifiers."
  Enabled: true

Style/EmptyLinesAroundBlockBody:
  Description: "Keeps track of empty lines around block bodies."
  Enabled: true
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - no_empty_lines

Style/EmptyLinesAroundClassBody:
  Description: "Keeps track of empty lines around class bodies."
  Enabled: true
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - empty_lines_except_namespace
    - empty_lines_special
    - no_empty_lines

Style/EmptyLinesAroundMethodBody:
  Description: "Keeps track of empty lines around method bodies."
  Enabled: true

Style/EmptyLinesAroundModuleBody:
  Description: "Keeps track of empty lines around module bodies."
  Enabled: true
  EnforcedStyle: no_empty_lines
  SupportedStyles:
    - empty_lines
    - empty_lines_except_namespace
    - empty_lines_special
    - no_empty_lines

# Checks whether the source file has a utf-8 encoding comment or not
# AutoCorrectEncodingComment must match the regex
# /#.*coding\s?[:=]\s?(?:UTF|utf)-8/
Style/Encoding:
  Description: 'Use UTF-8 as the source file encoding.'
  Enabled: true
  EnforcedStyle: when_needed
  SupportedStyles:
    - when_needed
    - always
  AutoCorrectEncodingComment: '# encoding: utf-8'

Style/EndBlock:
  Description: 'Avoid the use of END blocks.'
  Enabled: true

Style/EndOfLine:
  Description: 'Use Unix-style line endings.'
  Enabled: true

Style/EvenOdd:
  Description: 'Favor the use of Integer#even? && Integer#odd?'
  Enabled: true

Style/ExtraSpacing:
  Description: 'Do not use unnecessary spacing.'
  Enabled: true
  # When true, allows most uses of extra spacing if the intent is to align
  # things with the previous or next line, not counting empty lines or comment
  # lines.
  AllowForAlignment: true

# Disables checks for snake_case file names. This is needed within Sublime Text
# thanks to the use of temporary files.
Style/FileName:
  Description: 'Use snake_case for source file names.'
  Enabled: true
  # File names listed in AllCops:Include are excluded by default. Add extra
  # excludes here.
  Exclude: []

Style/FirstParameterIndentation:
  Description: 'Checks the indentation of the first parameter in a method call.'
  Enabled: true
  EnforcedStyle: special_for_inner_method_call_in_parentheses
  SupportedStyles:
    # The first parameter should always be indented one step more than the
    # preceding line.
    - consistent
    # The first parameter should normally be indented one step more than the
    # preceding line, but if it's a parameter for a method call that is itself
    # a parameter in a method call, then the inner parameter should be indented
    # relative to the inner method.
    - special_for_inner_method_call
    # Same as special_for_inner_method_call except that the special rule only
    # applies if the outer method call encloses its arguments in parentheses.
    - special_for_inner_method_call_in_parentheses

Style/FlipFlop:
  Description: 'Checks for flip flops'
  Enabled: true

Style/For:
  Description: 'Checks use of for or each in multiline loops.'
  Enabled: true
  EnforcedStyle: each
  SupportedStyles:
    - for
    - each

Style/FormatString:
  Description: 'Enforce the use of Kernel#sprintf, Kernel#format or String#%.'
  Enabled: true
  EnforcedStyle: format
  SupportedStyles:
    - format
    - sprintf
    - percent

Style/GlobalVars:
  Description: 'Do not introduce global variables.'
  Enabled: true
  AllowedVariables: []

Style/HashSyntax:
  Description: >-
                 Prefer Ruby 1.9 hash syntax { a: 1, b: 2 } over 1.8 syntax
                 { :a => 1, :b => 2 }.
  Enabled: true
  EnforcedStyle: ruby19_no_mixed_keys
  SupportedStyles:
    # checks for 1.9 syntax (e.g. {a: 1}) for all symbol keys
    - ruby19
    # checks for hash rocket syntax for all hashes
    - hash_rockets
    # forbids mixed key syntaxes (e.g. {a: 1, :b => 2})
    - no_mixed_keys
    # enforces both ruby19 and no_mixed_keys styles
    - ruby19_no_mixed_keys
  # Force hashes that have a symbol value to use hash rockets
  UseHashRocketsWithSymbolValues: false

Style/IfWithSemicolon:
  Description: 'Do not use if x; .... Use the ternary operator instead.'
  Enabled: true

Style/IndentArray:
  Description: >-
                 Checks the indentation of the first element in an array
                 literal.
  Enabled: true

Style/IndentationConsistency:
  Description: 'Keep indentation straight.'
  Enabled: true
  # The difference between `rails` and `normal` is that the `rails` style
  # prescribes that in classes and modules the `protected` and `private`
  # modifier keywords shall be indented the same as public methods and that
  # protected and private members shall be indented one step more than the
  # modifiers. Other than that, both styles mean that entities on the same
  # logical depth shall have the same indentation.
  EnforcedStyle: normal
  SupportedStyles:
    - normal
    - rails

Style/IndentationWidth:
  Description: 'Use 2 spaces for indentation.'
  Enabled: true
  # Number of spaces for each indentation level.
  Width: 2

Style/IndentHash:
  Description: 'Checks the indentation of the first key in a hash literal.'
  Enabled: true

Style/InfiniteLoop:
  Description: 'Use Kernel#loop for infinite loops.'
  Enabled: true

Style/InitialIndentation:
  Description: >-
    Checks the indentation of the first non-blank non-comment line in a file.
  Enabled: true

Style/Lambda:
  Description: 'Use the new lambda literal syntax for single-line blocks.'
  Enabled: true

Style/LambdaCall:
  Description: 'Use lambda.call(...) instead of lambda.(...).'
  Enabled: true
  EnforcedStyle: call
  SupportedStyles:
    - call
    - braces

Style/LeadingCommentSpace:
  Description: 'Comments should start with a space.'
  Enabled: true

Style/LineEndConcatenation:
  Description: >-
                 Use \ instead of + or << to concatenate two string literals at
                 line end.
  Enabled: true

Style/MethodCalledOnDoEndBlock:
  Description: 'Avoid chaining a method call on a do...end block.'
  Enabled: true

Style/MethodName:
  Description: 'Use the configured style when naming methods.'
  Enabled: true
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase

Style/MultilineBlockChain:
  Description: 'Avoid multi-line chains of blocks.'
  Enabled: true

Style/MultilineBlockLayout:
  Description: 'Ensures newlines after multiline block do statements.'
  Enabled: true

Style/MultilineIfThen:
  Description: 'Do not use then for multi-line if/unless.'
  Enabled: true

Style/MultilineOperationIndentation:
  Description: >-
                 Checks indentation of binary operations that span more than
                 one line.
  Enabled: true
  EnforcedStyle: aligned
  SupportedStyles:
    - aligned
    - indented

Style/MultilineTernaryOperator:
  Description: >-
                 Avoid multi-line ?: (the ternary operator);
                 use if/unless instead.
  Enabled: true

Style/NestedModifier:
  Description: 'Avoid using nested modifiers.'
  Enabled: true

Style/NestedTernaryOperator:
  Description: 'Use one expression per branch in a ternary operator.'
  Enabled: true

Style/Next:
  Description: 'Use `next` to skip iteration instead of a condition at the end.'
  Enabled: true
  # With `always` all conditions at the end of an iteration needs to be
  # replaced by next - with `skip_modifier_ifs` the modifier if like this one
  # are ignored: [1, 2].each { |a| return 'yes' if a == 1 }
  EnforcedStyle: skip_modifier_ifs
  # `MinBodyLength` defines the number of lines of the a body of an if / unless
  # needs to have to trigger this cop
  MinBodyLength: 3
  SupportedStyles:
    - skip_modifier_ifs
    - always

Style/NilComparison:
  Description: 'Prefer x.nil? to x == nil.'
  Enabled: true

Style/NonNilCheck:
  Enabled: true
  Description: 'Checks for redundant nil checks.'
  # With `IncludeSemanticChanges` set to `true`, this cop reports offenses for
  # `!x.nil?` and autocorrects that and `x != nil` to solely `x`, which is
  # **usually** OK, but might change behavior.
  #
  # With `IncludeSemanticChanges` set to `false`, this cop does not report
  # offenses for `!x.nil?` and does no changes that might change behavior.
  IncludeSemanticChanges: true

Style/Not:
  Description: 'Use ! instead of not.'
  Enabled: true

Style/OptionalArguments:
  Description: >-
                 Checks for optional arguments that do not appear at the end
                 of the argument list
  Enabled: true

Style/OptionHash:
  Description: "Don't use option hashes when you can use keyword arguments."
  Enabled: true
  # A list of parameter names that will be flagged by this cop.
  SuspiciousParamNames:
    - options
    - opts
    - args
    - params
    - parameters

Style/ParallelAssignment:
  Description: >-
                  Check for simple usages of parallel assignment.
                  It will only warn when the number of variables
                  matches on both sides of the assignment.
  Enabled: true

Style/ParenthesesAroundCondition:
  Description: >-
                 Don't use parentheses around the condition of an
                 if/unless/while.
  Enabled: true
  AllowSafeAssignment: false

Style/PercentLiteralDelimiters:
  Description: 'Use `%`-literal delimiters consistently'
  Enabled: true
  PreferredDelimiters:
    '%':  ()
    '%i': ()
    '%q': ()
    '%Q': ()
    '%r': '{}'
    '%s': ()
    '%w': ()
    '%W': ()
    '%x': ()

Style/PercentQLiterals:
  Description: 'Checks if uses of %Q/%q match the configured preference.'
  Enabled: true
  EnforcedStyle: lower_case_q
  SupportedStyles:
    - lower_case_q # Use %q when possible, %Q when necessary
    - upper_case_q # Always use %Q

Style/PredicateName:
  Description: 'Check the names of predicate methods.'
  Enabled: true
  # Predicate name prefixes.
  NamePrefix:
    - is_
    - has_
    - have_
  # Predicate name prefixes that should be removed.
  NamePrefixBlacklist:
    - is_
    - has_
    - have_
  # Predicate names which, despite having a blacklisted prefix, or no ?,
  # should still be accepted
  NameWhitelist:
    - is_a?

Style/RaiseArgs:
  Description: 'Checks the arguments passed to raise/fail.'
  Enabled: true
  EnforcedStyle: exploded
  SupportedStyles:
    - compact # raise Exception.new(msg)
    - exploded # raise Exception, msg

Style/RedundantBegin:
  Description: "Don't use begin blocks when they are not needed."
  Enabled: true

Style/RedundantException:
  Description: "Checks for an obsolete RuntimeException argument in raise/fail."
  Enabled: true

Style/RedundantFreeze:
  Description: "Checks usages of Object#freeze on immutable objects."
  Enabled: true

Style/RedundantReturn:
  Description: "Don't use return where it's not required."
  Enabled: true
  # When true allows code like `return x, y`.
  AllowMultipleReturnValues: false

Style/RedundantSelf:
  Description: "Don't use self where it's not needed."
  Enabled: true

Style/RegexpLiteral:
  Description: 'Use / or %r around regular expressions.'
  Enabled: true
  EnforcedStyle: mixed
  # slashes: Always use slashes.
  # percent_r: Always use %r.
  # mixed: Use slashes on single-line regexes, and %r on multi-line regexes.
  SupportedStyles:
    - slashes
    - percent_r
    - mixed
  # If false, the cop will always recommend using %r if one or more slashes
  # are found in the regexp string.
  AllowInnerSlashes: false

Style/RescueEnsureAlignment:
  Description: 'Align rescues and ensures correctly.'
  Enabled: true

Style/RescueModifier:
  Description: 'Avoid using rescue in its modifier form.'
  Enabled: true

Style/SelfAssignment:
  Description: >-
                 Checks for places where self-assignment shorthand should have
                 been used.
  Enabled: true

Style/Semicolon:
  Description: "Don't use semicolons to terminate expressions."
  Enabled: true
  # Allow ; to separate several expressions on the same line.
  AllowAsExpressionSeparator: false

Style/Send:
  Description: 'Prefer `Object#__send__` or `Object#public_send` to `send`, as `send` may overlap with existing methods.'
  Enabled: true

Style/SignalException:
  Description: 'Checks for proper usage of fail and raise.'
  Enabled: true
  EnforcedStyle: only_raise
  SupportedStyles:
    - only_raise
    - only_fail
    - semantic

Style/SpaceAfterColon:
  Description: 'Use spaces after colons.'
  Enabled: true

Style/SpaceAfterComma:
  Description: 'Use spaces after commas.'
  Enabled: true

Style/SpaceAfterMethodName:
  Description: >-
                 Do not put a space between a method name and the opening
                 parenthesis in a method definition.
  Enabled: true

Style/SpaceAfterNot:
  Description: Tracks redundant space after the ! operator.
  Enabled: true

Style/SpaceAfterSemicolon:
  Description: 'Use spaces after semicolons.'
  Enabled: true

Style/SpaceAroundBlockParameters:
  Description: 'Checks the spacing inside and after block parameters pipes.'
  Enabled: true
  EnforcedStyleInsidePipes: no_space
  SupportedStyles:
    - space
    - no_space

Style/SpaceAroundOperators:
  Description: 'Use a single space around operators.'
  Enabled: true

Style/SpaceBeforeBlockBraces:
  Description: >-
                 Checks that the left block brace has or doesn't have space
                 before it.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space

Style/SpaceBeforeComma:
  Description: 'No spaces before commas.'
  Enabled: true

Style/SpaceBeforeComment:
  Description: >-
                 Checks for missing space between code and a comment on the
                 same line.
  Enabled: true

Style/SpaceBeforeSemicolon:
  Description: 'No spaces before semicolons.'
  Enabled: true

Style/SpaceInsideBlockBraces:
  Description: >-
                 Checks that block braces have or don't have surrounding space.
                 For blocks taking parameters, checks that the left brace has
                 or doesn't have trailing space.
  Enabled: true
  EnforcedStyle: space
  SupportedStyles:
    - space
    - no_space
  # Valid values are: space, no_space
  EnforcedStyleForEmptyBraces: no_space
  # Space between { and |. Overrides EnforcedStyle if there is a conflict.
  SpaceBeforeBlockParameters: true

Style/SpaceInsideBrackets:
  Description: 'No spaces after [ or before ].'
  Enabled: true

Style/SpaceInsideHashLiteralBraces:
  Description: "Use spaces inside hash literal braces - or don't."
  Enabled: true
  EnforcedStyle: compact
  EnforcedStyleForEmptyBraces: no_space
  SupportedStyles:
    - space
    - no_space
    # 'compact' normally requires a space inside hash braces, with the exception
    # that successive left braces or right braces are collapsed together
    - compact

Style/SpaceInsideParens:
  Description: 'No spaces after ( or before ).'
  Enabled: true

Style/SpaceInsideRangeLiteral:
  Description: 'No spaces inside range literals.'
  Enabled: true

Style/SpaceInsideStringInterpolation:
  Description: 'Checks for padding/surrounding spaces inside string interpolation.'
  Enabled: true
  EnforcedStyle: no_space
  SupportedStyles:
    - space
    - no_space

Style/SpecialGlobalVars:
  Description: 'Avoid Perl-style global variables.'
  Enabled: true

Style/StabbyLambdaParentheses:
  Description: 'Check for the usage of parentheses around stabby lambda arguments.'
  Enabled: true
  EnforcedStyle: require_parentheses
  SupportedStyles:
    - require_parentheses
    - require_no_parentheses

Style/StringLiteralsInInterpolation:
  Description: >-
                 Checks if uses of quotes inside expressions in interpolated
                 strings match the configured preference.
  Enabled: true
  EnforcedStyle: single_quotes
  SupportedStyles:
    - single_quotes
    - double_quotes

Style/StringMethods:
  Description: 'Checks if configured preferred methods are used over non-preferred.'
  Enabled: true
  # Mapping from undesired method to desired_method
  # e.g. to use `to_sym` over `intern`:
  #
  # StringMethods:
  #   PreferredMethods:
  #     intern: to_sym
  PreferredMethods:
    intern: to_sym

Style/StructInheritance:
  Description: 'Checks for inheritance from Struct.new.'
  Enabled: true

Style/SymbolLiteral:
  Description: 'Use plain symbols instead of string symbols when possible.'
  Enabled: true

Style/SymbolProc:
  Description: 'Use symbols as procs instead of blocks when possible.'
  Enabled: true
  # A list of method names to be ignored by the check.
  # The names should be fairly unique, otherwise you'll end up ignoring lots of code.
  IgnoredMethods:
    - respond_to

Style/Tab:
  Description: 'No hard tabs.'
  Enabled: true

Style/TrailingBlankLines:
  Description: 'Checks trailing blank lines and final newline.'
  Enabled: true
  EnforcedStyle: final_newline
  SupportedStyles:
    - final_newline
    - final_blank_line

Style/TrailingUnderscoreVariable:
  Description: >-
                 Checks for the usage of unneeded trailing underscores at the
                 end of parallel variable assignment.
  AllowNamedUnderscoreVariables: true
  Enabled: true

Style/TrailingWhitespace:
  Description: 'Avoid trailing whitespace.'
  Enabled: true

Style/UnlessElse:
  Description: >-
                 Do not use unless with else. Rewrite these with the positive
                 case first.
  Enabled: true

Style/UnneededCapitalW:
  Description: 'Checks for %W when interpolation is not needed.'
  Enabled: true

Style/UnneededPercentQ:
  Description: 'Checks for %q/%Q when single quotes or double quotes would do.'
  Enabled: true

Style/VariableInterpolation:
  Description: >-
                 Don't interpolate global, instance and class variables
                 directly in strings.
  Enabled: true

Style/VariableName:
  Description: 'Use the configured style when naming variables.'
  Enabled: true
  EnforcedStyle: snake_case
  SupportedStyles:
    - snake_case
    - camelCase

Style/WhenThen:
  Description: 'Use when x then ... for one-line cases.'
  Enabled: true

Style/WhileUntilDo:
  Description: 'Checks for redundant do after while or until.'
  Enabled: true

##################### Metrics ##################################

Metrics/AbcSize:
  # The ABC size is a calculated magnitude, so this number can be an Integer or
  # a Float.
  Description: >-
                 A calculated magnitude based on number of assignments,
                 branches, and conditions.
  Enabled: true
  Max: 18

Metrics/BlockNesting:
  Description: 'Avoid excessive block nesting'
  Enabled: true
  Max: 3

Metrics/CyclomaticComplexity:
  Description: >-
                 A complexity metric that is strongly correlated to the number
                 of test cases needed to validate a method.
  Enabled: true
  Max: 6

Metrics/LineLength:
  Description: 'Limit lines to 80 characters.'
  Enabled: true
  Max: 80
  # To make it possible to copy or click on URIs in the code, we allow lines
  # contaning a URI to be longer than Max.
  AllowURI: true
  URISchemes:
    - http
    - https

Metrics/MethodLength:
  Description: 'Avoid methods longer than 10 lines of code.'
  Enabled: true
  CountComments: false  # count full line comments?
  Max: 10

Metrics/ModuleLength:
  Description: 'Avoid modules longer than 100 lines of code.'
  Enabled: true
  CountComments: false  # count full line comments?
  Max: 100

Metrics/ParameterLists:
  Description: 'Avoid parameter lists longer than three or four parameters.'
  Enabled: true
  Max: 5
  CountKeywordArgs: true

Metrics/PerceivedComplexity:
  Description: >-
                 A complexity metric geared towards measuring complexity for a
                 human reader.
  Enabled: true
  Max: 7

##################### Lint ##################################

Lint/AmbiguousOperator:
  Description: >-
                 Checks for ambiguous operators in the first argument of a
                 method invocation without parentheses.
  Enabled: true

Lint/AmbiguousRegexpLiteral:
  Description: >-
                 Checks for ambiguous regexp literals in the first argument of
                 a method invocation without parentheses.
  Enabled: true

# Allow safe assignment in conditions.
Lint/AssignmentInCondition:
  Description: "Don't use assignment in conditions."
  AllowSafeAssignment: false

Lint/BlockAlignment:
  Description: 'Align block ends correctly.'
  Enabled: true

Lint/CircularArgumentReference:
  Description: "Default values in optional keyword arguments and optional ordinal arguments should not refer back to the name of the argument."
  Enabled: true

Lint/ConditionPosition:
  Description: >-
                 Checks for condition placed in a confusing position relative to
                 the keyword.
  Enabled: true

Lint/Debugger:
  Description: 'Check for debugger calls.'
  Enabled: true

Lint/DefEndAlignment:
  Description: 'Align ends corresponding to defs correctly.'
  # The value `def` means that `end` should be aligned with the def keyword.
  # The value `start_of_line` means that `end` should be aligned with method
  # calls like `private`, `public`, etc, if present in front of the `def`
  # keyword on the same line.
  AlignWith: start_of_line
  SupportedStyles:
    - start_of_line
    - def
  AutoCorrect: false

Lint/DeprecatedClassMethods:
  Description: 'Check for deprecated class method calls.'
  Enabled: true

Lint/DuplicatedKey:
  Description: 'Check for duplicate keys in hash literals.'
  Enabled: true

Lint/DuplicateMethods:
  Description: 'Check for duplicate method definitions.'
  Enabled: true

Lint/EachWithObjectArgument:
  Description: 'Check for immutable argument given to each_with_object.'
  Enabled: true

Lint/ElseLayout:
  Description: 'Check for odd code arrangement in an else block.'
  Enabled: true

Lint/EmptyEnsure:
  Description: 'Checks for empty ensure block.'
  Enabled: true

Lint/EmptyInterpolation:
  Description: 'Checks for empty string interpolation.'
  Enabled: true

Lint/EndAlignment:
  Description: 'Align ends correctly.'
  # The value `keyword` means that `end` should be aligned with the matching
  # keyword (if, while, etc.).
  # The value `variable` means that in assignments, `end` should be aligned
  # with the start of the variable on the left hand side of `=`. In all other
  # situations, `end` should still be aligned with the keyword.
  # The value `start_of_line` means that `end` should be aligned with the start
  # of the line which the matching keyword appears on.
  AlignWith: keyword
  SupportedStyles:
    - keyword
    - variable
    - start_of_line
  AutoCorrect: false

Lint/EnsureReturn:
  Description: 'Do not use return in an ensure block.'
  Enabled: true

Lint/Eval:
  Description: 'The use of eval represents a serious security risk.'
  Enabled: true

Lint/FormatParameterMismatch:
  Description: 'The number of parameters to format/sprint must match the fields.'
  Enabled: true

Lint/HandleExceptions:
  Description: "Don't suppress exception."
  Enabled: true

Lint/InvalidCharacterLiteral:
  Description: >-
                 Checks for invalid character literals with a non-escaped
                 whitespace character.
  Enabled: true

Lint/LiteralInCondition:
  Description: 'Checks of literals used in conditions.'
  Enabled: true

Lint/LiteralInInterpolation:
  Description: 'Avoid interpolating literals in strings'
  AutoCorrect: false

Lint/Loop:
  Description: >-
                 Use Kernel#loop with break rather than begin/end/until or
                 begin/end/while for post-loop tests.
  Enabled: true

Lint/NestedMethodDefinition:
  Description: 'Do not use nested method definitions.'
  Enabled: true

Lint/NonLocalExitFromIterator:
  Description: 'Do not use return in iterator to cause non-local exit.'
  Enabled: true

Lint/ParenthesesAsGroupedExpression:
  Description: >-
                 Checks for method calls with a space before the opening
                 parenthesis.
  Enabled: true

Lint/RequireParentheses:
  Description: >-
                 Use parentheses in the method call to avoid confusion
                 about precedence.
  Enabled: true

Lint/RescueException:
  Description: 'Avoid rescuing the Exception class.'
  Enabled: true

Lint/ShadowingOuterLocalVariable:
  Description: >-
                 Do not use the same name as outer local variable
                 for block arguments or block local variables.
  Enabled: true

Lint/StringConversionInInterpolation:
  Description: 'Checks for Object#to_s usage in string interpolation.'
  Enabled: true

Lint/UnderscorePrefixedVariableName:
  Description: 'Do not use prefix `_` for a variable that is used.'
  Enabled: true

Lint/UnneededDisable:
  Description: >-
                 Checks for rubocop:disable comments that can be removed.
                 Note: this cop is not disabled when disabling all cops.
                 It must be explicitly disabled.
  Enabled: true

Lint/UnreachableCode:
  Description: 'Unreachable code.'
  Enabled: true

Lint/UnusedBlockArgument:
  Description: 'Checks for unused block arguments.'
  Enabled: true

Lint/UnusedMethodArgument:
  Description: 'Checks for unused method arguments.'
  AllowUnusedKeywordArguments: false
  IgnoreEmptyMethods: true
  Enabled: true

Lint/UselessAccessModifier:
  Description: 'Checks for useless access modifiers.'
  Enabled: true

Lint/UselessAssignment:
  Description: 'Checks for useless assignment to a local variable.'
  Enabled: true

Lint/UselessComparison:
  Description: 'Checks for comparison of something with itself.'
  Enabled: true

Lint/UselessElseWithoutRescue:
  Description: 'Checks for useless `else` in `begin..end` without `rescue`.'
  Enabled: true

Lint/UselessSetterCall:
  Description: 'Checks for useless setter call to a local variable.'
  Enabled: true

Lint/Void:
  Description: 'Possible use of operator/literal/variable in void context.'
  Enabled: true

##################### Performance ##################################

Performance/CaseWhenSplat:
  Description: >-
                  Place `when` conditions that use splat at the end
                  of the list of `when` branches.
  Enabled: true

Performance/Count:
  Description: >-
                  Use `count` instead of `select...size`, `reject...size`,
                  `select...count`, `reject...count`, `select...length`,
                  and `reject...length`.
  Enabled: true

Performance/Detect:
  Description: >-
                  Use `detect` instead of `select.first`, `find_all.first`,
                  `select.last`, and `find_all.last`.
  Enabled: true

Performance/FixedSize:
  Description: 'Do not compute the size of statically sized objects except in constants'
  Enabled: true

Performance/FlatMap:
  Description: >-
                  Use `Enumerable#flat_map`
                  instead of `Enumerable#map...Array#flatten(1)`
                  or `Enumberable#collect..Array#flatten(1)`
  Enabled: true
  EnabledForFlattenWithoutParams: false
  # If enabled, this cop will warn about usages of
  # `flatten` being called without any parameters.
  # This can be dangerous since `flat_map` will only flatten 1 level, and
  # `flatten` without any parameters can flatten multiple levels.

Performance/ReverseEach:
  Description: 'Use `reverse_each` instead of `reverse.each`.'
  Enabled: true

Performance/Sample:
  Description: >-
                  Use `sample` instead of `shuffle.first`,
                  `shuffle.last`, and `shuffle[Integer]`.
  Enabled: true

Performance/Size:
  Description: >-
                  Use `size` instead of `count` for counting
                  the number of elements in `Array` and `Hash`.
  Enabled: true

Performance/StringReplacement:
  Description: >-
                  Use `tr` instead of `gsub` when you are replacing the same
                  number of characters. Use `delete` instead of `gsub` when
                  you are deleting characters.
  Enabled: true

##################### Rails ##################################

Rails/ActionFilter:
  Description: 'Enforces consistent use of action filter methods.'
  Enabled: true
  EnforcedStyle: action
  SupportedStyles:
    - action
    - filter
  Include:
    - app/controllers/**/*.rb

Rails/Date:
  Description: >-
                  Checks the correct usage of date aware methods,
                  such as Date.today, Date.current etc.
  Enabled: true
  # The value `strict` disallows usage of `Date.today`, `Date.current`,
  # `Date#to_time` etc.
  # The value `flexible` allows usage of `Date.current`, `Date.yesterday`, etc
  # (but not `Date.today`) which are overriden by ActiveSupport to handle current
  # time zone.
  EnforcedStyle: flexible
  SupportedStyles:
    - strict
    - flexible

Rails/Delegate:
  Description: 'Prefer delegate method for delegations.'
  Enabled: true

Rails/FindBy:
  Description: 'Prefer find_by over where.first.'
  Enabled: true
  Include:
    - app/models/**/*.rb

Rails/FindEach:
  Description: 'Prefer all.find_each over all.find.'
  Enabled: true
  Include:
    - app/models/**/*.rb

Rails/HasAndBelongsToMany:
  Description: 'Prefer has_many :through to has_and_belongs_to_many.'
  Enabled: true
  Include:
    - app/models/**/*.rb

Rails/Output:
  Description: 'Checks for calls to puts, print, etc.'
  Enabled: true
  Include:
    - app/**/*.rb
    - config/**/*.rb
    - db/**/*.rb
    - lib/**/*.rb

Rails/PluralizationGrammar:
  Description: 'Checks for incorrect grammar when using methods like `3.day.ago`.'
  Enabled: true

Rails/ReadWriteAttribute:
  Description: >-
                 Checks for read_attribute(:attr) and
                 write_attribute(:attr, val).
  Enabled: true
  Include:
    - app/models/**/*.rb

Rails/ScopeArgs:
  Description: 'Checks the arguments of ActiveRecord scopes.'
  Enabled: true
  Include:
    - app/models/**/*.rb

Rails/TimeZone:
  Description: 'Checks the correct usage of time zone aware methods.'
  Enabled: true
  # The value `strict` means that `Time` should be used with `zone`.
  # The value `flexible` allows usage of `in_time_zone` instead of `zone`.
  EnforcedStyle: flexible
  SupportedStyles:
    - strict
    - flexible

Rails/Validation:
  Description: 'Use validates :attribute, hash of validations.'
  Enabled: true
  Include:
    - app/models/**/*.rb
